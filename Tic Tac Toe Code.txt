import java.util.Scanner;
public class TicTacToe {
	
	  public static Scanner sc = new Scanner(System.in);

	  public static void main(String[] args)
	  {
		 
	    int gameNumber = 0;
	    int move = 0;
	    boolean game = true;
	    do {
	    gameNumber++;	
	    System.out.println("Welcome to Tic-Tac-Toe! \n");
	    System.out.println("Please enter the size of the board or press 0 to exit \n");
	    final int size = sc.nextInt();
	    if(size==0) {
	    	game=false;
	    	break;
	    }
	    char[][] board = new char[size][size];
	    displayBoard(board);
	    
	    System.out.println("Please choose the difficulty level 1/2/3! \n");
	    int level = sc.nextInt();

	    reset(board);
	    
	    int remainingMoves = (size*size);

	    // First Move
	    if (gameNumber%2 != 0) { // For every odd numbered game, user goes first
	      userMove(board); 
	      move=1;
	    }
	    else {
	      compMove(board, level, move);
	      move=2;
	    }
	    displayBoard(board);
	    remainingMoves--;
	    
	    boolean gameOver = false;
	    if (size == 1) { // User always wins when size = 1
    		System.out.println("User won the game !");
    		break;
    	}
	    while (!gameOver && remainingMoves > 0) {
	    	
	      gameOver = checkWinner(board,(move-1)); // Checking if a winner is found

	      if (gameOver==true) {
	    	  if ((move-1)%2==0) { 
	    		  System.out.println("User won the game !");
	    		  break;
	    	  }
	    	  else if ((move-1)%2==1) {
	    		  System.out.println("Computer won the game !");
	    		  break;
	    	  }
	      }
	        
	      else {
	        if (move%2 != 0) // Computer plays odd numbered move
	          compMove(board, level, move);
	        else
	          userMove(board);
	        
	        displayBoard(board);
	        remainingMoves--;
	        move++;
	      }
	    }

	    if (remainingMoves==0 && !gameOver && size!=1) {
	    	System.out.println("Match drawn !");
	    	break;
	    }
	    
	    } while(game==true);
	  }

	  public static void reset(char[][] board)
	  {
	    for (int i = 0; i < board.length; i++)
	      for (int j = 0; j < board[0].length; j++)
	        board[i][j] = ' ';
	  }

	  public static void displayBoard(char[][] board)
	  {
	    int row = board.length;
	    int col = board[0].length;

	    System.out.print("    ");
	    for (int i = 0; i < col; i++)
	      System.out.print(i + "   ");
	    System.out.println();

	    for (int i = 0; i < row; i++) {
	      System.out.print(i + "  ");
	      for (int j = 0; j < col; j++) {
	        if (j != 0)
	          System.out.print("|");
	        System.out.print(" " + board[i][j] + " ");
	      }

	      System.out.println();

	      if (i != (row - 1)) {
	        System.out.print("   ");
	        for (int j = 0; j < col; j++) {
	          System.out.print("---");
	        }
	        System.out.println();
	      }
	    }
	    System.out.println();
	  }

	  public static void userMove(char[][] board)
	  {
	    System.out.println("Enter the row and column index numbers ");
	    int r = sc.nextInt();
	    int c = sc.nextInt();

	    while (board[r][c] != ' ') {
	      System.out.println("This cell is occupied. Enter another row and column index numbers ");
	      r = sc.nextInt();
	      c = sc.nextInt();
	    }
	    board[r][c] = 'x';
	  }

	  public static void compMove(char[][] board, int level, int move)
	  {
		  int rIndex = 0;
			int cIndex = 0;
			int totalElements = 0;
		if (level == 1) { // random move`			
			do {
			totalElements = board.length*board[0].length;
			int index = (int)(Math.random()*totalElements);
			rIndex = (int)index/board.length;
	        cIndex = index%board.length;
			} while(board[rIndex][cIndex]!=' ');
			board[rIndex][cIndex] = 'o';
		}
		
		else if (level == 2) {
			boolean winTemp = false;
			char[][] boardTemp = new char[board.length][board[0].length];
			for (int i = 0; i < board.length; i++) {
			      for (int j = 0; j < board[0].length; j++) {
			          boardTemp[i][j] = board[i][j];
			      }
			    }
			for (int i = 0; i < boardTemp.length; i++) { // checking if computer can win in the next move
			      for (int j = 0; j < boardTemp[0].length; j++) {
			    	  if (boardTemp[i][j] == ' ') {
			          boardTemp[i][j] = 'o';
			          for (int k=i; k < boardTemp.length; k++) {
			        	  for (int l =j+1; l<boardTemp[0].length; l++ ) {
			        		  boardTemp[k][l] = 'o';
			        		  winTemp = checkWinner(boardTemp, move);
					          if (winTemp == true) {
					        	  board[i][j] = 'o';
					        	  return;
					          }
					          else 
					        	  break;
					          
			        	  }
			          } 
			        }
			      }
			    }
			if (winTemp == false) { // random move if computer cannot win in the next move
				do {
					totalElements = board.length*board[0].length;
					int index = (int)(Math.random()*totalElements);
					rIndex = (int)index/board.length;
			        cIndex = index%board.length;
					} while(board[rIndex][cIndex]!=' ');
					board[rIndex][cIndex] = 'o';
			}
		   
	   }
		
		else if (level == 3) {
			boolean winTemp = false;
			char[][] boardTemp = new char[board.length][board[0].length];
			for (int i = 0; i < board.length; i++) {
			      for (int j = 0; j < board[0].length; j++) {
			          boardTemp[i][j] = board[i][j];
			      }
			    }
			for (int i = 0; i < boardTemp.length; i++) { 
			      for (int j = 0; j < boardTemp[0].length; j++) {
			    	  if (boardTemp[i][j] == ' ') {
			          boardTemp[i][j] = 'o';
			          winTemp = checkWinner(boardTemp, move);
			          if (winTemp == true) {
			        	  board[i][j] = 'o';
			        	  return;
			          }
			          else {
			        	  continue;
			          }
			        }
			      }
			    }
		}
	  }

	  public static boolean checkWinner(char[][] board, int move)
	  {
		  char symbol = ' ';
		  if (move%2 != 0) {
			  symbol = 'o'; // it was computer's move
		  }
		  else {
			  symbol = 'x'; // it was user's move
		  }
		int r = board.length;
	    int c = board[0].length;
	    int i, j;
	    boolean gameOver = false;

	    for (i = 0; i < r && !gameOver; i++) {  // (1) row check
	      for (j = 0; j < c; j++) {
	        if (board[i][j] != symbol)
	          break;
	      }
	      if (j == c)
	        gameOver = true;
	    }

	    for (j = 0; j < c && !gameOver; j++) {  // (2) column check
	      for (i = 0; i < r; i++) {
	        if (board[i][j] != symbol)
	          break;
	      }
	      if (i == r)
	        gameOver = true;
	    }

	    if (!gameOver) {  // (3) Diagonal check
	      for (i = 0; i < r; i++) {
	        if (board[i][i] != symbol)
	          break;
	      }
	      if (i == r)
	        gameOver = true;
	    }

	    if (!gameOver) {  // (4) Second diagonal check
	      for (i = 0; i < r; i++) {
	        if (board[i][r - 1 - i] != symbol)
	          break;
	      }
	      if (i == r)
	        gameOver = true;
	    }

	    return gameOver;
	  }
	  
	

}
